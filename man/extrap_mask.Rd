% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/masks.R
\name{extrap_mask}
\alias{extrap_mask}
\alias{range_mask}
\alias{sd_mask}
\alias{buffer_mask}
\alias{chull_mask}
\title{Create raster mask based on coordinates}
\usage{
extrap_mask(coords, envlayers, method = "range", nsd = 2, buffer_width = NULL)

range_mask(coords, envlayers)

sd_mask(coords, envlayers, nsd)

buffer_mask(coords, envlayers, buffer_width = 0.8)

chull_mask(coords, envlayers, buffer_width = NULL)
}
\arguments{
\item{coords}{data frame of coordinates (first column should be x and second should be y)}

\item{envlayers}{stack of rasters with environmental values to base mask on}

\item{method}{method to create mask (can be "range", "sd", "buffer", defaults to "range"). See details for more information.}

\item{nsd}{number of standard deviations to use if using the "sd" method}

\item{buffer_width}{buffer width to supply to \code{gBuffer} if using "buffer" method}
}
\value{
raster mask where values of 1 indicate areas that fall outside of observation range
}
\description{
Creates a raster that can be used to mask areas falling outside the observation range of a dataset, as defined by coordinates and corresponding raster values
}
\details{
method can either be:
\enumerate{
\item range - uses \code{\link{range_mask}}, mask all areas with values outside of the range of any of the values of the coords
\item sd - uses \code{\link{sd_mask}}, mask all areas outside the mean +/- stdev*nsd of any of the values of the coords (\code{nsd} defaults to 2)
\item buffer - uses \code{\link{buffer_mask}}, mask all areas outside of the buffer_width around the coords (\code{buffer_width} defaults to 0.8)
\item chull - uses \code{\link{chull_mask}}, mask all areas outside a convex hull of the points
}
}
\section{Functions}{
\itemize{
\item \code{range_mask()}: mask based on range of data

\item \code{sd_mask()}: mask based on mean and standard deviation of data

\item \code{buffer_mask()}: mask based on buffers around points

\item \code{chull_mask()}: mask based on range of data

}}
